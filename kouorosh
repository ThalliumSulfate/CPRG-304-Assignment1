// Kourosh (Amir)
    // Bubble Sorting
    public static void bubbleSort(Shape[] shapes, char type) {
        int n = shapes.length;
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (shouldSwap(shapes[j], shapes[j + 1], type)) {
                    swap(shapes, j, j + 1);
                }
            }
        }
    }

    private static boolean shouldSwap(Shape s1, Shape s2, char type) {
        int comparison = 0;

        switch (type) {
            case 'h':
                comparison = s1.compareTo(s2);
                break;
            case 'v':
                comparison = compareVolume.compare(s1, s2);
                break;
            case 'a':
                comparison = compareBaseArea.compare(s1, s2);
                break;
        }
        return comparison > 0;
    }


    // Kourosh (Amir)
    //Insertion
    public static void insertionSort(Shape[] shapes, char type) {
        for (int i = 1; i < shapes.length; i++) {
            Shape key = shapes[i];
            int j = i - 1;

            while (j >= 0 && compareShapes(shapes[j], key, type) > 0) {
                shapes[j + 1] = shapes[j];
                j = j - 1;
            }
            shapes[j + 1] = key;
        }
    }

    private static int compareShapes(Shape s1, Shape s2, char type) {
        switch (type) {
            case 'h':
                return s1.compareTo(s2);
            case 'v':
                return compareVolume.compare(s1, s2);
            case 'a':
                return compareBaseArea.compare(s1, s2);
            default:
                throw new IllegalArgumentException("Invalid");
        }
    }


    // Kourosh (Amir)
    //Selection
    public static void selectionSort(Shape[] shapes, char type) {
        for (int i = 0; i < shapes.length - 1; i++) {
            int minIndex = i;  // Assume the min is the first element
            for (int j = i + 1; j < shapes.length; j++) {
                if (compareShapes(shapes[j], shapes[minIndex], type) < 0) {
                    minIndex = j;  // Found new minimum; remember its index
                }
            }
            if (minIndex != i) {
                swap(shapes, i, minIndex);  // Swap if new minimum is found
            }
        }
    }


    // Kourosh (Amir)
// Merge Sort
    public static void mergeSort(Shape[] shapes, int low, int high, char type) {
        if (low < high) {
            //  middle point
            int middle = (low + high) / 2;


            mergeSort(shapes, low, middle, type);
            mergeSort(shapes, middle + 1, high, type);

            // Mergeing
            merge(shapes, low, middle, high, type);
        }
    }

    private static void merge(Shape[] shapes, int low, int middle, int high, char type) {

        int n1 = middle - low + 1;
        int n2 = high - middle;


        Shape[] leftArray = new Shape[n1];
        Shape[] rightArray = new Shape[n2];


        System.arraycopy(shapes, low, leftArray, 0, n1);
        System.arraycopy(shapes, middle + 1, rightArray, 0, n2);



        int i = 0, j = 0;
        int k = low;
        while (i < n1 && j < n2) {
            if (compareShapes(leftArray[i], rightArray[j], type) <= 0) {
                shapes[k] = leftArray[i];
                i++;
            } else {
                shapes[k] = rightArray[j];
                j++;
            }
            k++;
        }

        // Copy remaining elements of leftArray[] if any
        while (i < n1) {
            shapes[k] = leftArray[i];
            i++;
            k++;
        }

        // Copy remaining elements of rightArray[] if any
        while (j < n2) {
            shapes[k] = rightArray[j];
            j++;
            k++;
        }
    }
